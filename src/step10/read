step09 (사용자 정의 타입)심화, 고급기술
캡슐화

외부에서 마음대로 변수값을 지정하니 class의 목적에 부합하지 X

=> 캡슐화 - 외부에서 값을 꺼내오거나 할 수 없음 => class가 잘못된 역할을 수행하지 않고 자신의 용도에 맞게끔 쓰이도록!

=> 겟터셋터



step10

Exam01 - 캡슐화 사용 전
 1) 인스턴스 변수에 임의적으로 접근할 때.
 2) 내부에서 사용되어야 할 명령어를 외부에서 사용할 때.
무효한 값을 설정하여 프로그램의 목적 또는 작업의 목적에는 부합하지 않는 경우 문제가 된다.

=>  외부로부터 변수나 메서드에 대해 격리시키기, 캡슐화


Exam02, Score - 캡슐화 적용 후 - 외부 접근에 대해 격리 레벨을 높힌다.
격리 레벨을 높이면 값을 꺼낼 수가 없다 !

=> 값을 꺼내주는 연산자 겟터(getter) 추가


Exam03, Score2 - 값은 꺼낼 수 있지만 현재 Score는 인스턴스를 생성한 후에는
값을 변경할 수가 없다. 

=> 값을 설정해주는 연산자 셋터(setter) 추가

Exam04, Score3 - setter를 통해 인스턴스를 생성한 후에도 값을 변경할 수 있으며,
또한 setter 내부에서 값을 저장하기 전에 유효 여부를 검사하여 무효한 값이 저장되는 것을
막을 수 있다.
그러나 값(성적)을 변경시켜줄 때 마다 합계와 평균값이 달라져야 하기 때문에 sum과 aver을 다시
구해주어야 한다. 따라서 셋터를 통해 값을 변경시켜 준 이후에는 합계와 평균을 구하라는 명령
s.summary();, s.average();을 매번 주어야 한다.

=> 성적을 변경할 때 마다 합계와 평균이 자동으로 계산되도록 해준다

Exam05, Score4 - 성적을 변경할 때 마다 합계와 평균이 자동으로 계산되도록 해준다

=>Score4의 메서드 접근 레벨을 조정해준다.

Exam06, Score5 => Score5 클래스의 접근 레벨이 default로 같은 패키지 클래스만 접근 가능,
따라서 같은 package step10에 있는 Exam06에서는 Score5에 접근 가능.

Exam07, Score5 => 하지만 다른 패키지에 있는 Exam07에서는 Score5에 접근이 불가능하다.

=> 다른 패키지에서 클래스에 접긴하기 위해 Score5클래스의 접근 레벨을 public으로 공개한다

Exam08, Score6 => 다른 패키지에 있는 Exam08에서 Score6에 접근이 가능하다.
